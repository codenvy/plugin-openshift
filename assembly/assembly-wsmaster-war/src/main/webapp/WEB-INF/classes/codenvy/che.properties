#
# Copyright (c) 2012-2016 Codenvy, S.A.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#   Codenvy, S.A. - initial API and implementation
#

# workspace proxy configuration
http.proxy=
https.proxy=

### Storage and user configuration
# The location where your workspaces (and their projects) are stored.
# This property is ignored on Windows due to limitations with VirtualBox
# On Windows, all workspaces stored in c:\%userprofile%\AppData\Local\Eclipse Che\
che.user.workspaces.storage=${che.home}/workspaces

# Your projects are synchronized from the Che server into the machine running each
# workspace. This is the directory in the machine where your projects are placed.
che.machine.projects.internal.storage=/projects

# Che stores various internal data objects as JSON on the file system.
che.conf.storage=${che.home}/storage

# The dashboard uses this to manage direction of requests to the IDE
# Generally, do not modify.
che.ide.context=ide

### Configuration of embedded templates and samples
# Folder that contains JSON files with code templates and samples
project.template_description.location_dir=${che.home}/templates

### Configuration of embedded stacks
#Path to predefined stacks json
che.stacks.default=${che.home}/stacks/stacks.json
#Path to folder with predefined stack icons
che.stacks.images.storage=${che.home}/stacks/images

### oAuth configuration. You can setup GitHub oAuth to automate authentication to remote
### repositories. You need to first register this application with GitHub oAuth.
# GitHub application client ID
oauth.github.clientid=NULL
oauth.github.clientsecret=NULL
oauth.github.authuri= https://github.com/login/oauth/authorize
oauth.github.tokenuri= https://github.com/login/oauth/access_token
oauth.github.redirecturis= http://localhost:${SERVER_PORT}/wsmaster/api/oauth/callback
auth.oauth.access_denied_error_page=/error-oauth

# Activates user self-service at the API level.
# Che has a single identity implementation, so this does not change the user experience.
# If true, enables user creation at API level
user.self.creation.allowed=false

# Remove locations where internal message bus events should be propagated to.
# For debugging - set to retrieve internal events from external clients.
notification.server.propagate_events=

# Che extensions can be scheduled executions on a time basis. 
# This configures the size of the thread pool allocated to extensions that are launched on
# a recurring schedule.
schedule.core_pool_size=10

### Docker is the default machine implementation within Che. Workspaces are powered by machines
### that are constructed when the workspace is started. The images used to generate containers
### for the machines can come from DockerHub or a private Docker registry.
machine.docker.registry=${CHE_REGISTRY_HOST}:5000
machine.docker.unused_containers_cleanup_period_min=60
docker.registry.auth.url=http://${CHE_REGISTRY_HOST}:5000
docker.registry.auth.username=NULL
docker.registry.auth.password=NULL
docker.registry.auth.email=NULL
docker.connection.tcp.connection_timeout_ms=600000
docker.connection.tcp.read_timeout_ms=600000

### Machine configuration.  Machines power workspaces. This configures the Che behaviors that
### occur within the machine.

# This archive contains the server to run the workspace agent and any custom extensions.
# Che injects this archive into machines when they are booted or started.
machine.server.ext.archive=${che.home}/lib/ws-agent.zip

# The machine's log files are stored here
machine.logs.location=${che.logs.dir}/machine/logs

# Size of the machine by default.  What is used if RAM parameter not provided by user or API.
machine.default_mem_size_mb=1024

# When the workspace master launches a new workspace, Che performs checks of the internal Web 
# services. When Che gets a valid response, we know that the workspace agent is ready for use.
machine.ws_agent.max_start_time_ms=60000
machine.ws_agent.ping_delay_ms=2000
machine.ws_agent.ping_conn_timeout_ms=2000
machine.ws_agent.ping_timed_out_error_msg=Timeout reached. The Che server has been unable to verify that your workspace's agent has successfully booted. Either the workspace is unreachable, the agent had an error during startup, or your workspace is starting slowly. You can configure machine.ws_agent.max_start_time_ms in Che properties to increase the timeout.

# Hosts listed here will be added to /etc/hosts of each workspace machine.
# Add an entry here if you write a ws-agent extension that needs to communicate outside the machine
machine.docker.machine_extra_hosts=NULL

# This is the API endpoint of the workspace master running within the core Che server.
# This tells the workspace agent how to connect back to the Che server.
# che-host is a fake DNS hostname that Che creates for itself.
machine.docker.che_api.endpoint=http://che-host:${SERVER_PORT}/wsmaster/api

# If this is true, then we always pull an image from a registry even if we have an image cached
# locally. If false, Docker only pulls image if it does not exist locally.
machine.docker.pull_image=true

# If true, then all docker machines will start in privilege mode.
machine.docker.privilege_mode=false

# If the browser clients that are accessing Che are remote AND the configuration of Docker is an
# internal IP address or using Unix sockets, then remote browser clients will not be able to connect
# to the workspace. Set the Docker configuration so that Docker containers have an external IP 
# address and provide this host or IP address here.
machine.docker.local_node_host=NULL

# URL path to api service.  
# Browser clients use this to initiate REST communications with workspace master
api.endpoint=http://localhost:${SERVER_PORT}/wsmaster/api

#### Everrest is a Java Web Services toolkit that manages JAX-RS & web socket communications
#### Users should rarely need to configure this.
# Disable asynchronous mechanism that is embedded in everrest.
org.everrest.asynchronous=false
# Quantity of asynchronous requests which may be processed at the same time
org.everrest.asynchronous.pool.size=20
# Size of queue. If asynchronous request can't be processed after consuming it will be added in queue.
org.everrest.asynchronous.queue.size=500
# Timeout in minutes for request. If after timeout request is not done or client did not come yet to get result of request it may be discarded.
org.everrest.asynchronous.job.timeout=10
# Size of cache for waiting, running and ended request.
org.everrest.asynchronous.cache.size=1024
# Path to asynchronous service
org.everrest.asynchronous.service.path=/async/

machine.ssh.connection_timeout_ms=3000
# The location of the Web Socket terminal used within the browser.
# This is copied into the machine and run from within it.
# Suffix helps differentiate archive for different architectures/OSes
machine.server.terminal.path_to_archive.linux_amd64=${che.home}/lib/linux_amd64/terminal
machine.server.terminal.path_to_archive.linux_arm7=${che.home}/lib/linux_arm7/terminal
